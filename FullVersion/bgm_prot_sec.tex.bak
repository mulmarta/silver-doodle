% !TEX root = main.tex
% !TeX spellcheck = en_US

\section{Formal Security Statement for \saik}\label{sec:saik_sec}
In this section, we formally state security of \saik. First, let us describe in detail the predicates \KwConf{} and \KwAuth{} for \saik, defined in \cref{fig:safe}. We define two versions of the predicates: the stronger one that skips the code in \BoxedString{boxes} and the weaker one that includes the whole code. The stronger version is not achieved by \saik. In \cref{sec:ext-sec-predicates} we sketch how to modify it to achieve it.\footnote{The
  modification causes a small efficiency loss, but also makes the protocol and proof more complex by introducing many special cases.}% We do not incorporate it in the protocol, in order not to distract from the essence of the security argument.}

\input{fig_cgka_predicates}

We start by explaining the stronger version, which is simpler. First, both predicates give no guarantees for epochs in detached trees until they are attached. From now on, we do not consider epochs in detached trees.
The definition is built around the notion of secrets. Secrets are an abstraction for values stored in the protocol state. There are two types of secrets: group secrets, stored in the state of each party, and individual secrets, stored in the states of some parties. Each corruption exposes a number of secrets and each epoch change replaces a number of secrets by possibly secure ones.
The helper predicate $\safeGrpSecsSecure{}(\hgnodeid)$ decides if the group secrets in $\hgnodeid$ are secure, i.e., not exposed, and the predicate $\safeIndSecsSecure(\hgnodeid, \id)$ decides if $\id$'s individual secrets in $\hgnodeid$ are secure.

The predicate $\KwConf{}(\hgnodeid)$ is equivalent to $\safeGrpSecsSecure{}(\hgnodeid)$, because the group key is a group secret. Further, $\KwAuth{}(\hgnodeid, \id)$ is true if either $\safeGrpSecsSecure{}(\hgnodeid)$ is true or $\safeIndSecsSecure(\hgnodeid,\id)$, because both group and $\id$'s secrets are necessary to impersonate $\id$ in $\hgnodeid$. %(Note that the root $\hgnodeid=0$ cannot be injected by definition.)
%
It remains to determine when group and individual secrets are exposed.
For group secrets, $\safeGrpSecsSecure(\hgnodeid)$ is defined recursively. The base case states that the group secrets in the root $\hgnodeid=0$ are secure if and only if no party is corrupted in the root. The intuition is that the first secrets are chosen at random by the group creator, and, for FS, corruptions in the descendants of an epoch do not affect the confidentiality of its group secrets.

The induction step states that the group secrets in an epoch $\hgnodeid>0$ are secure if no party is corrupted in $\hgnodeid$, the epoch is not created by an injection and either the group secrets in $\hgnodeid$'s parent $\hgnodeid_p$ are secure or all individual secrets in $\hgnodeid$ are secure. Intuitively, this formalizes the requirement that the adversary can learn the group secrets in only three ways: First, from the state of a party corrupted in $\hgnodeid$. Second, by injecting them (some injections are disallowed by the authenticity predicate). Third, by computing them the same way an honest \emph{receiver} transitioning to $\hgnodeid$ would. The latter can only be done using exposed group secrets of $\hgnodeid_p$ and the receiver's individual secrets in $\hgnodeid_p$. Note that the possible receivers are those parties that are group members in $\hgnodeid$ and that are not $\hgnodeid$'s creator (who transitions on sending).

Finally, individual secrets of $\id$ in $\hgnodeid$ are exposed whenever there is some other epoch $\hgnodeid'$ where $\id$'s secrets are the same as in $\hgnodeid$ and where $\id$ was corrupted or its secrets were injected on its behalf. The secrets of $\id$ are the same in two epochs if no epoch change between them replaces the secrets, i.e., is created by $\id$, removes it or adds it.

\paragraph{Weaker guarantees.}
In the weaker version of the security predicates, individual secrets of $\id$ in $\hgnodeid$ are not secure in an additional scenario, formalized by \safeWeakAdd. In this scenario, an $\id_s$ first honestly adds $\id$ and the environment $\Adv$ injects a message adding $\id$ to some other epoch. Finally, $\id$ joins $\Adv$'s epoch and is corrupted before sending any message.
See \cref{sec:ext-sec-predicates} for an explanation of why \saik is insecure in this case and how it can be modified to be secure (the explanation does not require knowledge of the details of \saik).

\paragraph{Theorem.}
Security of \saik is formalized by the following theorem, proved in \cref{sec:bgm_prot_proof}. We note that for the \mmPKE scheme, we assume a security property called One-Wayness under Replayable Chosen-Ciphertext Attack, \mmowrcca. The notion is strictly weaker than \mmindrcca. See \cref{sec:mmowrcca} for the definition of \mmowrcca and a proof that it is implied by \mmindrcca.%\footnote{\mmowrcca
%  is similar to one-wayness for regular PKE schemes, but for \mmPKE there are some subtleties about how the challenge message \emph{vector} is chosen. We define a version which is exactly what is needed to prove \saik's security.}

\newcommand{\ucideal}{\textnormal{\textsc{ideal}}}
\newcommand{\ucreal}{\textnormal{\textsc{real}}}
\begin{restatable}{theorem}{itkSec}
  Let $\funcCGKA$ be the CGKA functionality with predicates \KwConf{} and \KwAuth{} defined in \cref{fig:safe}. Let $\saik$ be instantiated with schemes \mmPKE, \sigscheme and \mac, and with the \hkdf functions modelled as a random oracle \hash.
  Let $\Adv$ be any environment. Denote the output of $\Adv$ from the real execution with \saik and the hybrid functionality $\funcPKI$ from \cref{fig:aks} as $\ucreal_{\saik, \funcPKI}(\Adv)$ and the output of $\Adv$ from the ideal execution with $\funcCGKA$ and a simulator $\ucsim$ as $\ucideal_{\funcCGKA, \ucsim}(\Adv)$.
  %
 There exists a simulator $\ucsim$ and adversaries $\Bdv[1]$ to $\Bdv[4]$ such that
  \begin{align*}
    \Pr[\ucideal&_{\funcCGKA, \ucsim}(\Adv) = 1] - \Pr\left[\ucreal_{\saik, \funcPKI}(\Adv) = 1\right] \leq \\
    &\textnormal{Adv}^{\gamefont{CR}}_{\hash}(\Bdv[1]) \\
    % confidentiality
    +\ & q_e^2(q_e+1) \log(q_n) \cdot\textnormal{Adv}^\mmowrcca_{\mmPKE,q_e\log(q_n),q_n}(\Bdv[2]) \\
    % authenticity asym
    +\ & 2q_e\cdot \textnormal{Adv}^{\ufcma}_\sigscheme(\Bdv[3]) \\
    +\ & q_e \cdot \textnormal{Adv}^{\ufcma}_\mac(\Bdv[4]) + 3q_hq_e^2(q_e+1)/2^\kappa,
  \end{align*}
%  \begin{align*}
%    \Pr\left[\ucideal_{\funcCGKA, \ucsim}(\Adv) = 1\right] - &\Pr\left[\ucreal_{\saik, \funcPKI}(\Adv) = 1\right] \leq \textnormal{Adv}^{\gamefont{CR}}_{\hash}(\Bdv[1]) \\
%    % confidentiality
%    +\ & q_e^2(q_e+1) \log(q_n) \cdot\textnormal{Adv}^\mmowrcca_{\mmPKE,q_e\log(q_n),q_n}(\Bdv[2]) \\
%    +\ & 3q_hq_e^2(q_e+1)/2^\kappa
%    % authenticity asym
%    + 2q_e\cdot \textnormal{Adv}^{\ahrsufcma}_\ers(\Bdv[3]) \\
%    +\ & 2q_e\cdot \textnormal{Adv}^{\rkc}_\ers(\Bdv[4])
%    % authenticity sym
%    + q_e \cdot \textnormal{Adv}^{\shrsufcma}_\ers(\Bdv[5]),
%  \end{align*}
  where $q_e$, $q_n$ and $q_h$ denote bounds on the number of epochs, the group size and the number of $\Adv$'s queries to the random oracle modelling the $\hash$, respectively.
  %  In the reductions, the $\hkdf$ functions are modelled as a random oracle.
  \label{thm:itk_secure}\end{restatable}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: "main"
%%% End:
